// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
	"github.com/jackc/pgx/v5/pgtype"
)

type GenderEnum string

const (
	GenderEnumMale   GenderEnum = "Male"
	GenderEnumFemale GenderEnum = "Female"
)

func (e *GenderEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GenderEnum(s)
	case string:
		*e = GenderEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for GenderEnum: %T", src)
	}
	return nil
}

type NullGenderEnum struct {
	GenderEnum GenderEnum `json:"gender_enum"`
	Valid      bool       `json:"valid"` // Valid is true if GenderEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGenderEnum) Scan(value interface{}) error {
	if value == nil {
		ns.GenderEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GenderEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGenderEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GenderEnum), nil
}

type PaymentStatusEnum string

const (
	PaymentStatusEnumPending   PaymentStatusEnum = "Pending"
	PaymentStatusEnumInProcess PaymentStatusEnum = "In-Process"
	PaymentStatusEnumCompleted PaymentStatusEnum = "Completed"
)

func (e *PaymentStatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatusEnum(s)
	case string:
		*e = PaymentStatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatusEnum: %T", src)
	}
	return nil
}

type NullPaymentStatusEnum struct {
	PaymentStatusEnum PaymentStatusEnum `json:"payment_status_enum"`
	Valid             bool              `json:"valid"` // Valid is true if PaymentStatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatusEnum), nil
}

type StatusEnum string

const (
	StatusEnumPending   StatusEnum = "Pending"
	StatusEnumInProcess StatusEnum = "In-Process"
	StatusEnumCompleted StatusEnum = "Completed"
)

func (e *StatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StatusEnum(s)
	case string:
		*e = StatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for StatusEnum: %T", src)
	}
	return nil
}

type NullStatusEnum struct {
	StatusEnum StatusEnum `json:"status_enum"`
	Valid      bool       `json:"valid"` // Valid is true if StatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.StatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StatusEnum), nil
}

type Author struct {
	ID        int32            `json:"id"`
	Name      string           `json:"name"`
	IsDeleted pgtype.Bool      `json:"is_deleted"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type Banner struct {
	ID        int32            `json:"id"`
	Name      string           `json:"name"`
	Image     string           `json:"image"`
	StartDate time.Time        `json:"start_date"`
	EndDate   time.Time        `json:"end_date"`
	OfferID   int32            `json:"offer_id"`
	IsDeleted pgtype.Bool      `json:"is_deleted"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type Book struct {
	ID              int32            `json:"id"`
	Title           string           `json:"title"`
	AuthorID        int32            `json:"author_id"`
	PublicationDate pgtype.Date      `json:"publication_date"`
	Price           int32            `json:"price"`
	StockQuantity   int32            `json:"stock_quantity"`
	IsDeleted       pgtype.Bool      `json:"is_deleted"`
	CreatedAt       pgtype.Timestamp `json:"created_at"`
	UpdatedAt       pgtype.Timestamp `json:"updated_at"`
	Bestseller      pgtype.Bool      `json:"bestseller"`
}

type BooksCategory struct {
	ID         int32            `json:"id"`
	BookID     int32            `json:"book_id"`
	CategoryID int32            `json:"category_id"`
	IsDeleted  pgtype.Bool      `json:"is_deleted"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

type CategoriesImage struct {
	ID         int32            `json:"id"`
	Image      string      		`json:"image"`
	CategoryID int32            `json:"category_id"`
	IsDeleted  pgtype.Bool      `json:"is_deleted"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

type Category struct {
	ID        int32            `json:"id"`
	Name      string           `json:"name"`
	IsSpecial pgtype.Text      `json:"is_special"`
	IsDeleted pgtype.Bool      `json:"is_deleted"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type Country struct {
	ID          int32            `json:"id"`
	Iso2        string           `json:"iso2"`
	ShortName   string           `json:"short_name"`
	LongName    string           `json:"long_name"`
	Numcode     pgtype.Text      `json:"numcode"`
	CallingCode string           `json:"calling_code"`
	Cctld       string           `json:"cctld"`
	IsDeleted   pgtype.Bool      `json:"is_deleted"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

type Image struct {
	ID        int32            `json:"id"`
	ImageUrl  string           `json:"image_url"`
	IsDeleted pgtype.Bool      `json:"is_deleted"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type Offer struct {
	ID                 int32            `json:"id"`
	BookID             int32            `json:"book_id"`
	DiscountPercentage pgtype.Text      `json:"discount_percentage"`
	StartDate          pgtype.Date      `json:"start_date"`
	EndDate            pgtype.Date      `json:"end_date"`
	IsDeleted          pgtype.Bool      `json:"is_deleted"`
	CreatedAt          pgtype.Timestamp `json:"created_at"`
	UpdatedAt          pgtype.Timestamp `json:"updated_at"`
}

type Order struct {
	ID         int32            `json:"id"`
	BookID     int32            `json:"book_id"`
	UserID     int32            `json:"user_id"`
	OrderNo    pgtype.Text      `json:"order_no"`
	Quantity   int32            `json:"quantity"`
	TotalPrice int32            `json:"total_price"`
	Status     StatusEnum       `json:"status"`
	IsDeleted  pgtype.Bool      `json:"is_deleted"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

type Payment struct {
	ID            int32             `json:"id"`
	OrderID       int32             `json:"order_id"`
	Amount        int32             `json:"amount"`
	PaymentStatus PaymentStatusEnum `json:"payment_status"`
	IsDeleted     pgtype.Bool       `json:"is_deleted"`
	CreatedAt     pgtype.Timestamp  `json:"created_at"`
	UpdatedAt     pgtype.Timestamp  `json:"updated_at"`
}

type Permission struct {
	ID         int32            `json:"id"`
	Name       string           `json:"name"`
	Permission pgtype.Text      `json:"permission"`
	IsDeleted  pgtype.Bool      `json:"is_deleted"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

type Role struct {
	ID          int32            `json:"id"`
	Name        string           `json:"name"`
	Description pgtype.Text      `json:"description"`
	IsDeleted   pgtype.Bool      `json:"is_deleted"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

type RolesPermission struct {
	ID           int32            `json:"id"`
	RoleID       int32            `json:"role_id"`
	PermissionID int32            `json:"permission_id"`
	IsDeleted    pgtype.Bool      `json:"is_deleted"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

type User struct {
	ID        int32            `json:"id"`
	FirstName string           `json:"first_name"`
	LastName  string           `json:"last_name"`
	Gender    GenderEnum       `json:"gender"`
	Dob       pgtype.Date      `json:"dob"`
	Address   string           `json:"address"`
	City      string           `json:"city"`
	State     string           `json:"state"`
	CountryID int32            `json:"country_id"`
	MobileNo  string           `json:"mobile_no"`
	Username  string           `json:"username"`
	Email     string           `json:"email"`
	Password  string           `json:"password"`
	RoleID    int32            `json:"role_id"`
	Otp       int32            `json:"otp"`
	IsDeleted pgtype.Bool      `json:"is_deleted"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}
