// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    first_name,
    last_name,
    gender,
    dob,
    address,
    city,
    state,
    country_id,
    mobile_no,
    username,
    email,
    password,
    role_id,
    otp,
    is_deleted
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15
) RETURNING id, first_name, last_name, gender, dob, address, city, state, country_id, mobile_no, username, email, password, role_id, otp, is_deleted, created_at, updated_at
`

type CreateUserParams struct {
	FirstName string      `json:"first_name"`
	LastName  string      `json:"last_name"`
	Gender    GenderEnum  `json:"gender"`
	Dob       pgtype.Date `json:"dob"`
	Address   string      `json:"address"`
	City      string      `json:"city"`
	State     string      `json:"state"`
	CountryID int32       `json:"country_id"`
	MobileNo  string      `json:"mobile_no"`
	Username  string      `json:"username"`
	Email     string      `json:"email"`
	Password  string      `json:"password"`
	RoleID    int32       `json:"role_id"`
	Otp       int32       `json:"otp"`
	IsDeleted pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Gender,
		arg.Dob,
		arg.Address,
		arg.City,
		arg.State,
		arg.CountryID,
		arg.MobileNo,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.RoleID,
		arg.Otp,
		arg.IsDeleted,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.Dob,
		&i.Address,
		&i.City,
		&i.State,
		&i.CountryID,
		&i.MobileNo,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.RoleID,
		&i.Otp,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users WHERE id = $1
RETURNING id, first_name, last_name, gender, dob, address, city, state, country_id, mobile_no, username, email, password, role_id, otp, is_deleted, created_at, updated_at
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.Dob,
		&i.Address,
		&i.City,
		&i.State,
		&i.CountryID,
		&i.MobileNo,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.RoleID,
		&i.Otp,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, first_name, last_name, gender, dob, address, city, state, country_id, mobile_no, username, email, password, role_id, otp, is_deleted, created_at, updated_at FROM users LIMIT 10
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Gender,
			&i.Dob,
			&i.Address,
			&i.City,
			&i.State,
			&i.CountryID,
			&i.MobileNo,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.RoleID,
			&i.Otp,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, gender, dob, address, city, state, country_id, mobile_no, username, email, password, role_id, otp, is_deleted, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.Dob,
		&i.Address,
		&i.City,
		&i.State,
		&i.CountryID,
		&i.MobileNo,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.RoleID,
		&i.Otp,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    first_name = CASE 
    WHEN $1::boolean = TRUE THEN $2
    ELSE first_name
    END,
    last_name = CASE 
    WHEN $3::boolean = TRUE THEN $4
    ELSE last_name
    END,
    gender = CASE 
    WHEN $5::boolean = TRUE THEN $6
    ELSE gender
    END,
    dob = CASE 
    WHEN $7::boolean = TRUE THEN $8
    ELSE dob
    END,
    address = CASE 
    WHEN $9::boolean = TRUE THEN $10
    ELSE address
    END,
    city = CASE 
    WHEN $11::boolean = TRUE THEN $12
    ELSE city
    END,
    state = CASE 
    WHEN $13::boolean = TRUE THEN $14
    ELSE state
    END,
    country_id = CASE 
    WHEN $15::boolean = TRUE THEN $16
    ELSE country_id
    END,
    mobile_no = CASE 
    WHEN $17::boolean = TRUE THEN $18
    ELSE mobile_no
    END,
    username = CASE 
    WHEN $19::boolean = TRUE THEN $20
    ELSE username
    END,
    email = CASE 
    WHEN $21::boolean = TRUE THEN $22
    ELSE email
    END,
    password = CASE 
    WHEN $23::boolean = TRUE THEN $24
    ELSE password
    END,
    role_id = CASE 
    WHEN $25::boolean = TRUE THEN $26
    ELSE role_id
    END,
    otp = CASE 
    WHEN $27::boolean = TRUE THEN $28
    ELSE otp
    END,
    is_deleted = CASE 
    WHEN $29::boolean = TRUE THEN $30
    ELSE is_deleted
    END
WHERE id = $31
RETURNING id, first_name, last_name, gender, dob, address, city, state, country_id, mobile_no, username, email, password, role_id, otp, is_deleted, created_at, updated_at
`

type UpdateUserParams struct {
	SetFirstName bool        `json:"set_first_name"`
	FirstName    string      `json:"first_name"`
	SetLastName  bool        `json:"set_last_name"`
	LastName     string      `json:"last_name"`
	SetGender    bool        `json:"set_gender"`
	Gender       GenderEnum  `json:"gender"`
	SetDob       bool        `json:"set_dob"`
	Dob          pgtype.Date `json:"dob"`
	SetAddress   bool        `json:"set_address"`
	Address      string      `json:"address"`
	SetCity      bool        `json:"set_city"`
	City         string      `json:"city"`
	SetState     bool        `json:"set_state"`
	State        string      `json:"state"`
	SetCountryID bool        `json:"set_country_id"`
	CountryID    int32       `json:"country_id"`
	SetMobileNo  bool        `json:"set_mobile_no"`
	MobileNo     string      `json:"mobile_no"`
	SetUsername  bool        `json:"set_username"`
	Username     string      `json:"username"`
	SetEmail     bool        `json:"set_email"`
	Email        string      `json:"email"`
	SetPassword  bool        `json:"set_password"`
	Password     string      `json:"password"`
	SetRoleID    bool        `json:"set_role_id"`
	RoleID       int32       `json:"role_id"`
	SetOtp       bool        `json:"set_otp"`
	Otp          int32       `json:"otp"`
	SetIsDeleted bool        `json:"set_is_deleted"`
	IsDeleted    pgtype.Bool `json:"is_deleted"`
	ID           int32       `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.SetFirstName,
		arg.FirstName,
		arg.SetLastName,
		arg.LastName,
		arg.SetGender,
		arg.Gender,
		arg.SetDob,
		arg.Dob,
		arg.SetAddress,
		arg.Address,
		arg.SetCity,
		arg.City,
		arg.SetState,
		arg.State,
		arg.SetCountryID,
		arg.CountryID,
		arg.SetMobileNo,
		arg.MobileNo,
		arg.SetUsername,
		arg.Username,
		arg.SetEmail,
		arg.Email,
		arg.SetPassword,
		arg.Password,
		arg.SetRoleID,
		arg.RoleID,
		arg.SetOtp,
		arg.Otp,
		arg.SetIsDeleted,
		arg.IsDeleted,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Gender,
		&i.Dob,
		&i.Address,
		&i.City,
		&i.State,
		&i.CountryID,
		&i.MobileNo,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.RoleID,
		&i.Otp,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
