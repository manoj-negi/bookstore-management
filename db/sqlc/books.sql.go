// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: books.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
    title,
    author_id,
    publication_date,
    price,
    stock_quantity,
    bestseller,
    is_deleted
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
) RETURNING id, title, author_id, publication_date, price, stock_quantity, is_deleted, created_at, updated_at, bestseller
`

type CreateBookParams struct {
	Title           string      `json:"title"`
	AuthorID        int32       `json:"author_id"`
	PublicationDate pgtype.Date `json:"publication_date"`
	Price           int32       `json:"price"`
	StockQuantity   int32       `json:"stock_quantity"`
	Bestseller      pgtype.Bool `json:"bestseller"`
	IsDeleted       pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook,
		arg.Title,
		arg.AuthorID,
		arg.PublicationDate,
		arg.Price,
		arg.StockQuantity,
		arg.Bestseller,
		arg.IsDeleted,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.PublicationDate,
		&i.Price,
		&i.StockQuantity,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Bestseller,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :one
DELETE FROM books WHERE id = $1
RETURNING id, title, author_id, publication_date, price, stock_quantity, is_deleted, created_at, updated_at, bestseller
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRow(ctx, deleteBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.PublicationDate,
		&i.Price,
		&i.StockQuantity,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Bestseller,
	)
	return i, err
}

const getAllBooks = `-- name: GetAllBooks :many
SELECT id, title, author_id, publication_date, price, stock_quantity, is_deleted, created_at, updated_at, bestseller FROM books LIMIT 10
`

func (q *Queries) GetAllBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.Query(ctx, getAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.AuthorID,
			&i.PublicationDate,
			&i.Price,
			&i.StockQuantity,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Bestseller,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBestseller = `-- name: GetBestseller :many
SELECT id, title, author_id, publication_date, price, stock_quantity, is_deleted, created_at, updated_at, bestseller FROM books WHERE bestseller = true
`

func (q *Queries) GetBestseller(ctx context.Context) ([]Book, error) {
	rows, err := q.db.Query(ctx, getBestseller)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.AuthorID,
			&i.PublicationDate,
			&i.Price,
			&i.StockQuantity,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Bestseller,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBook = `-- name: GetBook :one
SELECT id, title, author_id, publication_date, price, stock_quantity, is_deleted, created_at, updated_at, bestseller FROM books WHERE id = $1
`

func (q *Queries) GetBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRow(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.PublicationDate,
		&i.Price,
		&i.StockQuantity,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Bestseller,
	)
	return i, err
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET
    title = CASE
    WHEN $1::boolean = TRUE THEN $2
    ELSE title
    END,
    author_id = CASE
    WHEN $3::boolean = TRUE THEN $4
    ELSE author_id
    END,
    publication_date = CASE
    WHEN $5::boolean = TRUE THEN $6
    ELSE publication_date
    END,
    price = CASE
    WHEN $7::boolean = TRUE THEN $8
    ELSE price
    END,
    stock_quantity = CASE
    WHEN $9::boolean = TRUE THEN $10
    ELSE stock_quantity
    END,
    bestseller = CASE
    WHEN $11::boolean = TRUE THEN $12
    ELSE bestseller
    END,
    is_deleted = CASE
    WHEN $13::boolean = TRUE THEN $14
    ELSE is_deleted
    END
WHERE id = $15
RETURNING id, title, author_id, publication_date, price, stock_quantity, is_deleted, created_at, updated_at, bestseller
`

type UpdateBookParams struct {
	SetTitle           bool        `json:"set_title"`
	Title              string      `json:"title"`
	SetAuthorID        bool        `json:"set_author_id"`
	AuthorID           int32       `json:"author_id"`
	SetPublicationDate bool        `json:"set_publication_date"`
	PublicationDate    pgtype.Date `json:"publication_date"`
	SetPrice           bool        `json:"set_price"`
	Price              int32       `json:"price"`
	SetStockQuantity   bool        `json:"set_stock_quantity"`
	StockQuantity      int32       `json:"stock_quantity"`
	SetBestseller      bool        `json:"set_bestseller"`
	Bestseller         pgtype.Bool `json:"bestseller"`
	SetIsDeleted       bool        `json:"set_is_deleted"`
	IsDeleted          pgtype.Bool `json:"is_deleted"`
	ID                 int32       `json:"id"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, updateBook,
		arg.SetTitle,
		arg.Title,
		arg.SetAuthorID,
		arg.AuthorID,
		arg.SetPublicationDate,
		arg.PublicationDate,
		arg.SetPrice,
		arg.Price,
		arg.SetStockQuantity,
		arg.StockQuantity,
		arg.SetBestseller,
		arg.Bestseller,
		arg.SetIsDeleted,
		arg.IsDeleted,
		arg.ID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.PublicationDate,
		&i.Price,
		&i.StockQuantity,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Bestseller,
	)
	return i, err
}
