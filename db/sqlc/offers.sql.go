// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: offers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOffer = `-- name: CreateOffer :one
INSERT INTO offers (
    book_id,
    discount_percentage,
    start_date,
    end_date,
    is_deleted
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, book_id, discount_percentage, start_date, end_date, is_deleted, created_at, updated_at
`

type CreateOfferParams struct {
	BookID             int32       `json:"book_id"`
	DiscountPercentage pgtype.Text `json:"discount_percentage"`
	StartDate          pgtype.Date `json:"start_date"`
	EndDate            pgtype.Date `json:"end_date"`
	IsDeleted          pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) CreateOffer(ctx context.Context, arg CreateOfferParams) (Offer, error) {
	row := q.db.QueryRow(ctx, createOffer,
		arg.BookID,
		arg.DiscountPercentage,
		arg.StartDate,
		arg.EndDate,
		arg.IsDeleted,
	)
	var i Offer
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.DiscountPercentage,
		&i.StartDate,
		&i.EndDate,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOffer = `-- name: DeleteOffer :one
DELETE FROM offers WHERE id = $1
RETURNING id, book_id, discount_percentage, start_date, end_date, is_deleted, created_at, updated_at
`

func (q *Queries) DeleteOffer(ctx context.Context, id int32) (Offer, error) {
	row := q.db.QueryRow(ctx, deleteOffer, id)
	var i Offer
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.DiscountPercentage,
		&i.StartDate,
		&i.EndDate,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllOffers = `-- name: GetAllOffers :many
SELECT id, book_id, discount_percentage, start_date, end_date, is_deleted, created_at, updated_at FROM offers LIMIT 10
`

func (q *Queries) GetAllOffers(ctx context.Context) ([]Offer, error) {
	rows, err := q.db.Query(ctx, getAllOffers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Offer{}
	for rows.Next() {
		var i Offer
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.DiscountPercentage,
			&i.StartDate,
			&i.EndDate,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOffer = `-- name: GetOffer :one
SELECT id, book_id, discount_percentage, start_date, end_date, is_deleted, created_at, updated_at FROM offers WHERE id = $1
`

func (q *Queries) GetOffer(ctx context.Context, id int32) (Offer, error) {
	row := q.db.QueryRow(ctx, getOffer, id)
	var i Offer
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.DiscountPercentage,
		&i.StartDate,
		&i.EndDate,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOffer = `-- name: UpdateOffer :one
UPDATE offers
SET
    book_id = CASE
    WHEN $1::boolean = TRUE THEN $2
    ELSE book_id
    END,
    discount_percentage = CASE
    WHEN $3::boolean = TRUE THEN $4
    ELSE discount_percentage
    END,
    start_date = CASE
    WHEN $5::boolean = TRUE THEN $6
    ELSE start_date
    END,
    end_date = CASE
    WHEN $7::boolean = TRUE THEN $8
    ELSE end_date
    END,
    is_deleted = CASE
    WHEN $9::boolean = TRUE THEN $10
    ELSE is_deleted
    END
WHERE id = $11
RETURNING id, book_id, discount_percentage, start_date, end_date, is_deleted, created_at, updated_at
`

type UpdateOfferParams struct {
	SetBookID             bool        `json:"set_book_id"`
	BookID                int32       `json:"book_id"`
	SetDiscountPercentage bool        `json:"set_discount_percentage"`
	DiscountPercentage    pgtype.Text `json:"discount_percentage"`
	SetStartDate          bool        `json:"set_start_date"`
	StartDate             pgtype.Date `json:"start_date"`
	SetEndDate            bool        `json:"set_end_date"`
	EndDate               pgtype.Date `json:"end_date"`
	SetIsDeleted          bool        `json:"set_is_deleted"`
	IsDeleted             pgtype.Bool `json:"is_deleted"`
	ID                    int32       `json:"id"`
}

func (q *Queries) UpdateOffer(ctx context.Context, arg UpdateOfferParams) (Offer, error) {
	row := q.db.QueryRow(ctx, updateOffer,
		arg.SetBookID,
		arg.BookID,
		arg.SetDiscountPercentage,
		arg.DiscountPercentage,
		arg.SetStartDate,
		arg.StartDate,
		arg.SetEndDate,
		arg.EndDate,
		arg.SetIsDeleted,
		arg.IsDeleted,
		arg.ID,
	)
	var i Offer
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.DiscountPercentage,
		&i.StartDate,
		&i.EndDate,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
