// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: payments.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
    order_id,
    amount,
    payment_status,
    is_deleted
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, order_id, amount, payment_status, is_deleted, created_at, updated_at
`

type CreatePaymentParams struct {
	OrderID       int32             `json:"order_id"`
	Amount        int32             `json:"amount"`
	PaymentStatus PaymentStatusEnum `json:"payment_status"`
	IsDeleted     pgtype.Bool       `json:"is_deleted"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.OrderID,
		arg.Amount,
		arg.PaymentStatus,
		arg.IsDeleted,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.PaymentStatus,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :one
DELETE FROM payments WHERE id = $1
RETURNING id, order_id, amount, payment_status, is_deleted, created_at, updated_at
`

func (q *Queries) DeletePayment(ctx context.Context, id int32) (Payment, error) {
	row := q.db.QueryRow(ctx, deletePayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.PaymentStatus,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllPayments = `-- name: GetAllPayments :many
SELECT id, order_id, amount, payment_status, is_deleted, created_at, updated_at FROM payments LIMIT 10
`

func (q *Queries) GetAllPayments(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.Query(ctx, getAllPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Amount,
			&i.PaymentStatus,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPayment = `-- name: GetPayment :one
SELECT id, order_id, amount, payment_status, is_deleted, created_at, updated_at FROM payments WHERE id = $1
`

func (q *Queries) GetPayment(ctx context.Context, id int32) (Payment, error) {
	row := q.db.QueryRow(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.PaymentStatus,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePayment = `-- name: UpdatePayment :one
UPDATE payments
SET
    order_id = CASE
    WHEN $1::boolean = TRUE THEN $2
    ELSE order_id
    END,
    amount = CASE
    WHEN $3::boolean = TRUE THEN $4
    ELSE amount
    END,
    payment_status = CASE
    WHEN $5::boolean = TRUE THEN $6
    ELSE payment_status
    END,
    is_deleted = CASE
    WHEN $7::boolean = TRUE THEN $8
    ELSE is_deleted
    END
WHERE id = $9
RETURNING id, order_id, amount, payment_status, is_deleted, created_at, updated_at
`

type UpdatePaymentParams struct {
	SetOrderID       bool              `json:"set_order_id"`
	OrderID          int32             `json:"order_id"`
	SetAmount        bool              `json:"set_amount"`
	Amount           int32             `json:"amount"`
	SetPaymentStatus bool              `json:"set_payment_status"`
	PaymentStatus    PaymentStatusEnum `json:"payment_status"`
	SetIsDeleted     bool              `json:"set_is_deleted"`
	IsDeleted        pgtype.Bool       `json:"is_deleted"`
	ID               int32             `json:"id"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, updatePayment,
		arg.SetOrderID,
		arg.OrderID,
		arg.SetAmount,
		arg.Amount,
		arg.SetPaymentStatus,
		arg.PaymentStatus,
		arg.SetIsDeleted,
		arg.IsDeleted,
		arg.ID,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.PaymentStatus,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
