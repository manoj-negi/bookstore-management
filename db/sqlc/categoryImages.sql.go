// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: categoryImages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCategoryImage = `-- name: CreateCategoryImage :one
INSERT INTO categories_images (
    image,
    category_id,
    is_deleted
) VALUES (
    $1,
    $2,
    $3
) RETURNING id, image, category_id, is_deleted, created_at, updated_at
`

type CreateCategoryImageParams struct {
	Image      string	   `json:"image"`
	CategoryID int32       `json:"category_id"`
	IsDeleted  pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) CreateCategoryImage(ctx context.Context, arg CreateCategoryImageParams) (CategoriesImage, error) {
	row := q.db.QueryRow(ctx, createCategoryImage, arg.Image, arg.CategoryID, arg.IsDeleted)
	var i CategoriesImage
	err := row.Scan(
		&i.ID,
		&i.Image,
		&i.CategoryID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategoryImage = `-- name: DeleteCategoryImage :one
DELETE FROM categories_images WHERE id = $1
RETURNING id, image, category_id, is_deleted, created_at, updated_at
`

func (q *Queries) DeleteCategoryImage(ctx context.Context, id int32) (CategoriesImage, error) {
	row := q.db.QueryRow(ctx, deleteCategoryImage, id)
	var i CategoriesImage
	err := row.Scan(
		&i.ID,
		&i.Image,
		&i.CategoryID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllCategoryImages = `-- name: GetAllCategoryImages :many
SELECT id, image, category_id, is_deleted, created_at, updated_at FROM categories_images LIMIT 10
`

func (q *Queries) GetAllCategoryImages(ctx context.Context) ([]CategoriesImage, error) {
	rows, err := q.db.Query(ctx, getAllCategoryImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CategoriesImage{}
	for rows.Next() {
		var i CategoriesImage
		if err := rows.Scan(
			&i.ID,
			&i.Image,
			&i.CategoryID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryImage = `-- name: GetCategoryImage :one
SELECT id, image, category_id, is_deleted, created_at, updated_at FROM categories_images WHERE id = $1
`

func (q *Queries) GetCategoryImage(ctx context.Context, id int32) (CategoriesImage, error) {
	row := q.db.QueryRow(ctx, getCategoryImage, id)
	var i CategoriesImage
	err := row.Scan(
		&i.ID,
		&i.Image,
		&i.CategoryID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCategoryImage = `-- name: UpdateCategoryImage :one
UPDATE categories_images
SET
image =  CASE
    WHEN $1::boolean = TRUE THEN $2
    ELSE image
    END,
    category_id =  CASE
    WHEN $3::boolean = TRUE THEN $4
    ELSE category_id
    END,
    is_deleted =  CASE
    WHEN $5::boolean = TRUE THEN $6
    ELSE is_deleted
    END
WHERE id = $7
RETURNING id, image, category_id, is_deleted, created_at, updated_at
`

type UpdateCategoryImageParams struct {
	SetImage      bool        `json:"set_image"`
	Image         string 	  `json:"image"`
	SetCategoryID bool        `json:"set_category_id"`
	CategoryID    int32       `json:"category_id"`
	SetIsDeleted  bool        `json:"set_is_deleted"`
	IsDeleted     pgtype.Bool `json:"is_deleted"`
	ID            int32       `json:"id"`
}

func (q *Queries) UpdateCategoryImage(ctx context.Context, arg UpdateCategoryImageParams) (CategoriesImage, error) {
	row := q.db.QueryRow(ctx, updateCategoryImage,
		arg.SetImage,
		arg.Image,
		arg.SetCategoryID,
		arg.CategoryID,
		arg.SetIsDeleted,
		arg.IsDeleted,
		arg.ID,
	)
	var i CategoriesImage
	err := row.Scan(
		&i.ID,
		&i.Image,
		&i.CategoryID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
